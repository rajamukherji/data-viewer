var pkgconfig := fun(Args) do
	expr('pkg-config {Args}') => fun() shell("pkg-config", Args):trim
end

CFLAGS := ['-O3', '-g', pkgconfig("--cflags gtk+-3.0 gdk-pixbuf-2.0")]
LDFLAGS := ['-g', '-lm', pkgconfig("--libs gtk+-3.0 gdk-pixbuf-2.0")]

c_compile := fun(Object) do
	var Source := Object % "c"
	execute('gcc -c {CFLAGS} -o{Object} -I{Source:dir} {Source}')
end

c_includes := fun(Source) do
	var Files := []
	var Lines := shell('gcc {CFLAGS} -I{Source:dir} -M -MG {Source}')
	var Start, File := ""
	var I := for J := 1 .. Lines:length do
		if Lines[J, J + 2] = ": " then
			exit J + 2
		end
	end
	loop while I <= Lines:length
		var Char := Lines[I]
		if Char <= " " then
			if File != "" then
				Files:put(file(File))
				File := ""
			end
		elseif Char = "\\" then
			I := old + 1
			Char := Lines[I]
			if Char = " " then
				File := '{old} '
			end
		else
			File := '{old}{Char}'
		end
		I := old + 1
	end
	return Files
end

SourceTypes := {
	"c" is [c_includes, c_compile]
}

c_program := fun(Executable, Objects, Libraries) do
	Objects := Objects or []
	Libraries := Libraries or []
	var Sources := []
	for Object in Objects do
		for Extension, Functions in SourceTypes do
			var Source := Object % Extension
			if Source:exists then
				Sources:put(Source)
				var Scan := Source:scan("INCLUDES") => Functions[1]
				Object[Source, Scan] => Functions[2]
				exit
			end
		end
	end
	Executable[Objects, Libraries] => fun(Executable) do
		execute('gcc', '-o', Executable, Objects, Libraries, LDFLAGS)
		if not DEBUG then
			execute('strip', Executable)
		end
	end
	DEFAULT[Executable]
end

file("libcsv.o") => fun(Object) do
	var Source := file("libcsv/libcsv.c")
	execute('gcc -c {CFLAGS} -o{Object} -I{Source:dir} {Source}')
end

c_program(BIN_DIR/"viewer", [file("viewer.o"), file("libcsv.o")])
