CFLAGS := old + [
	'-g', '-std=gnu99',
	'-D_GNU_SOURCE',
	"-I.", '-pthread',
	pkgconfig("--cflags gtk+-3.0 gdk-pixbuf-2.0 gtksourceview-4 gobject-introspection-1.0")
]
LDFLAGS := old + [
	'-g', '-lm',
	'-pthread',
	pkgconfig("--libs gtk+-3.0 gdk-pixbuf-2.0 gtksourceview-4 gobject-introspection-1.0")
]

if DEBUG then
	CFLAGS := old + ["-DDEBUG"]
else
	CFLAGS := old + ["-O3"]
end

if defined("MINGW") then
	LDFLAGS := old + ["-lregex"]
end

file("libcsv.o") => fun(Object) do
	var Source := file("libcsv/libcsv.c")
	execute(CC, '-c {CFLAGS} -o{Object} -I{Source:dir} {Source}')
end

MINILANG_USERADB := 1
MINILANG_USEMATH := 1
MINILANG_USEGTK := 1

let Minilang := subdir("minilang")

Minilang::generate_init_files()

file("whereami/src"):mkdir
CFLAGS := old + ['-D_GNU_SOURCE', "-Iinclude", '-I{file("minilang/src/minilang.h"):dirname}', '-I{file("whereami/src/whereami.h"):dirname}']
LDFLAGS := old + ["-lgc", "-lczmq", "-ljansson", "-ldl", "-lgvc", "-lcgraph"]

file("resources.c")[file("resources.xml")] => fun(Target) do
	execute("glib-compile-resources", '--sourcedir={file("build.rabs"):dir(:true)}', file("resources.xml"), "--generate-source", '--target={Target}')
end

var Objects := [
	file("viewer.o"),
	file("resources.o"),
	file("ml_csv.o"),
	file("libcsv.o"),
	file("whereami/src/whereami.o")
]

if USE_GL then
	CFLAGS := old + ['-DUSE_GL']
	LDFLAGS := old + ['-lepoxy']
	c_program(BIN_DIR/"data-viewer-gl", Objects, [Minilang::LIBMINILANG])
else
	c_program(BIN_DIR/"data-viewer", Objects, [Minilang::LIBMINILANG])
	install(BIN_DIR/"data-viewer", PREFIX/"bin/data-viewer", "+x")
	install(file("data-viewer.desktop"), PREFIX/'share/applications/data-viewer.desktop')
end
